# This is a basic workflow to help you get started with Actions

name: Deploy to Alibaba Cloud ECI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]


  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-image-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Image Tag
        id: set-image-tag
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)-$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"

      - name: Log in to Alibaba Cloud Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login --username=${{ secrets.ACR_USERNAME }} --password-stdin ${{ secrets.ACR_REGISTRY }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.ACR_REGISTRY }}:${{ env.IMAGE_TAG }}
          docker build -t "$IMAGE_NAME" .
          docker push "$IMAGE_NAME"
          
  deploy-to-eci:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
    steps:
      - name: Install Alibaba Cloud CLI
        run: |
          curl -L https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz | tar -xz
          sudo mv aliyun /usr/local/bin/

      - name: Configure Alibaba Cloud CLI
        run: |
          aliyun configure set --access-key-id ${{ secrets.ACCESS_KEY_ID }} \
                              --access-key-secret ${{ secrets.ACCESS_KEY_SECRET }} \
                              --region ap-northeast-1

      - name: Deploy to Alibaba Cloud ECI
        run: |
          PORTS=$(jq -c -n '[{"Protocol":"TCP","Port":80}]')
    
          aliyun eci CreateContainerGroup \
            --RegionId ap-northeast-1 \
            --ContainerGroupName container-group-mycontainer \
            --Container.1.Image ${{ secrets.ACR_REGISTRY }}:${{ env.IMAGE_TAG }} \
            --Container.1.Name my-app-container \
            --Container.1.Cpu 1 \
            --Container.1.Memory 2 \
            --VSwitchId ${{ secrets.VSWITCH_ID }} \
            --SecurityGroupId ${{ secrets.SECURITY_GROUP_ID }} \
            --Container.1.Port "$PORTS"
